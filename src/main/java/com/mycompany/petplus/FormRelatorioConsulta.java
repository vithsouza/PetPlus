/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.petplus;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

/**
 *
 * @author yasmi
 */
public class FormRelatorioConsulta extends javax.swing.JFrame {
    private static FormRelatorioConsulta cadRelatorioConsultaUnic;
    private final ConsultaService consultaService; 
   
    public static FormRelatorioConsulta geraFormRelatorioConsulta(){
        if(cadRelatorioConsultaUnic == null){
            cadRelatorioConsultaUnic = new FormRelatorioConsulta();
        }
        return cadRelatorioConsultaUnic;
    }
    /**
     * Creates new form FormRelatorioConsulta
     */
    public FormRelatorioConsulta() {
        initComponents();
        setLocationRelativeTo(null);
        consultaService = new ConsultaService(); 
        carregarConsultas();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConsultas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Paciente", "Dia", "Horario"
            }
        ));
        jScrollPane1.setViewportView(jTableConsultas);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Consultas marcadas");

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Desmarcar consulta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Buscar consulta");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(69, 69, 69)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel1)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        desmarcarConsultaSelecionada();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        sair();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        buscarConsulta();
    }//GEN-LAST:event_jButton4ActionPerformed

    public void sair(){
        int ret = JOptionPane.showConfirmDialog(
                null,
                "Deseja realmente voltar ao menu do funcionario?",
                "Saida",
                JOptionPane.YES_NO_CANCEL_OPTION
        );
        if(ret == 0){
            dispose();
        }
    }
    
    public void preencherTabela(List<Consulta> consultas) { // Renamed parameter for clarity
        DefaultTableModel model = (DefaultTableModel) jTableConsultas.getModel();
        model.setRowCount(0);

        // Define a formatter for date and time
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");

        for (Consulta con : consultas) { // Loop through each Consulta object
            String pacienteNome = "N/A";

            // Safely get patient and owner information
            if (con.getPaciente() != null) {
                pacienteNome = con.getPaciente().getNome();
            }

            // Format date and time
            String dia = con.getDataHora() != null ? con.getDataHora().format(dateFormatter) : "N/A";
            String horario = con.getDataHora() != null ? con.getDataHora().format(timeFormatter) : "N/A";

            model.addRow(new Object[]{
                pacienteNome,
                dia,
                horario
            });
        }
    }


    public final void carregarConsultas() {
        try {
            List<Consulta> consultas = consultaService.buscarTodos();
            preencherTabela(consultas);
        } catch (Exception ex) {
            Logger.getLogger(FormRelatorioConsulta.class.getName()).log(Level.SEVERE, "Erro ao carregar consultas: ", ex);
            JOptionPane.showMessageDialog(this, "Erro ao carregar consultas: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

   public void buscarConsulta() {
    String nome = JOptionPane.showInputDialog(this, "Digite o nome do paciente para buscar:");

    if (nome != null && !nome.trim().isEmpty()) {
        try {
            List<Consulta> todos = consultaService.buscarTodos();
            List<Consulta> filtrados = new ArrayList<>();

            for (Consulta con : todos) {
                if (con.getPaciente() != null && con.getPaciente().getNome().toLowerCase().contains(nome.toLowerCase())) {
                    filtrados.add(con);
                }
            }

            if (filtrados.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nenhuma consulta encontrada com esse nome de paciente.");
            } else {
                preencherTabela(filtrados);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar consulta: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Nenhum nome informado para busca.");
    }
}





    public void desmarcarConsultaSelecionada() {
    int linhaSelecionada = jTableConsultas.getSelectedRow();
    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, "Selecione uma consulta para desmarcar.");
        return;
    }

    String nomePaciente = (String) jTableConsultas.getValueAt(linhaSelecionada, 0);

    try {
        new ConsultaService().deletar(nomePaciente);
        ((DefaultTableModel) jTableConsultas.getModel()).removeRow(linhaSelecionada);
        JOptionPane.showMessageDialog(this, "Consulta desmarcada com sucesso.");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao desmarcar consulta: " + e.getMessage());
    }
}

    
    public void atualizarDataHoraConsulta() {
    int linhaSelecionada = jTableConsultas.getSelectedRow();
    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, "Selecione uma consulta para atualizar.");
        return;
    }

    try {
        long idConsulta = (long) jTableConsultas.getValueAt(linhaSelecionada, 0);
        Consulta consulta = consultaService.buscarTodos().stream()
                .filter(c -> c.getId() == idConsulta)
                .findFirst()
                .orElse(null);

        if (consulta == null) {
            JOptionPane.showMessageDialog(this, "Consulta não encontrada.");
            return;
        }

        String novaData = JOptionPane.showInputDialog(this, "Nova data (yyyy-MM-dd) ou deixe vazio:");
        String novaHora = JOptionPane.showInputDialog(this, "Nova hora (HH:mm) ou deixe vazio:");

        LocalDateTime dataHoraAtual = consulta.getDataHora();

        if (novaData != null && !novaData.isEmpty()) {
            dataHoraAtual = dataHoraAtual.with(LocalDate.parse(novaData));
        }
        if (novaHora != null && !novaHora.isEmpty()) {
            dataHoraAtual = dataHoraAtual.with(LocalTime.parse(novaHora));
        }

        consulta.setDataHora(dataHoraAtual);
        consultaService.atualizar(consulta);
        JOptionPane.showMessageDialog(this, "Consulta atualizada com sucesso.");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar consulta: " + e.getMessage());
    }
}
    
    
    






    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormRelatorioConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormRelatorioConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormRelatorioConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormRelatorioConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormRelatorioConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableConsultas;
    // End of variables declaration//GEN-END:variables
}
